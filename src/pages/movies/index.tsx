import Head from "next/head"
import styles from '../../styles/Movies.module.css'
import { useState, useEffect, useReducer } from "react"
import TopMenu from "../../components/TopMenu"
import MoviesSort from "../../components/MoviesSort"
import MoviesFilterSide from "../../components/MoviesFilterSide"
import MoviesFilterText from "../../components/MoviesFilterText"
import SingleLine from "../../components/lists/SingleLine"
import Layout from "../../components/Layout"
import useSWRInfinite from "swr"
import InfoButton from "../../components/InfoButton"
import { takeCoverage } from "v8"
import { off } from "process"

const fetcher = url => fetch(url).then(r => r.json())

// filter On / Off
function helperReducer(arrState, action) {
		let arr = arrState;

		if(action.payload.checked) {
			arr.push(action.payload.value)
		} else {
			arr = arr.filter(el => el !== action.payload.value)
		}
		return arr 
}

function generateAPIURL(state) {
	let urlGenre, urlDecade, url
	const keys = Object.keys(state)
	let arr = []

	keys.forEach((key) => {
		let output
		if(typeof state[key] === 'string') {
			output = state[key].length >= 4 ? state[key] : undefined
		} else if(Array.isArray(state[key])) {
			output = state[key].length > 1 ? state[key].map(el => el).join('+') : state[key][0]
		}

		if(output) arr.push(`${key}=${output}`)
	})

	if(arr.length > 1) {
		let foo = arr.map((el) => el).join('&')
		url = `/api/movies?${foo}`
	} else if(arr.length === 1) {
		url = `/api/movies?${arr[0]}`
	} else {
		url = `/api/movies`
	}

	console.log(url)

	return url
}

function reducer(state, action) {
	let arr
	switch(action.type) {
		case "title":
			return {
				...state,
				title: action.payload.value
			};
		case "genre":
			arr = helperReducer(state.genre, action)
			return {
				...state,
				genre: arr
			};
		case "decade":
			arr = helperReducer(state.decade, action)
			return {
				...state,
				decade: arr
			};
		default:
			return state;
	}
}

const initialState = {
	title: '',
	genre: [],
	decade: [],
}

const Movies = () => {
	const [displayCovers, setDisplayCover] = useState(true);
	const [state, dispatch] = useReducer(reducer, initialState);
	const [activeSort, setActiveSort] = useState('');
	const { data: searchData, error: searchError } = useSWRInfinite(generateAPIURL(state), fetcher);

	// console.log({state, activeSort})
	// console.log(searchData)

	console.log(state)


	function handleSortInput(button) {
		if(activeSort === button) {
			setActiveSort('')
		} else {
			setActiveSort(button)
		}
	}

	function handleFilters(data) {
		let entrySanitized = data.entry;
		if(data.type === 'decade') entrySanitized = data.entry.slice(0,4)

		dispatch({
			type: data.type,
			payload: {
				checked: data.checked, 
				value: data.entry,
				valueAPI: entrySanitized
			}
		})
	}

	function handleSearchTitle(inputString) {
		dispatch({
			type: 'title',
			payload: {
				value: inputString
			}
		})
	}

	function deleteFilter(tag,type) {
		dispatch({
			type: type,
			payload: {
				checked: false,
				value: tag
			}
		})
	}
	
	// Later we should retrieve all available genres from existing movies in the database
	const genres = ['action','animation', 'comedy','drama','fantasy','horror','romance','sciencefiction','thriller','war']
	const decades = ['1970s','1980s','1990s','2000s','2010s','2020s']


	return (
		<>
			<Head>
				<title>Movies</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<TopMenu />

			<div className={styles.containerContent}>
				<div className={styles.contentWrap}>

					<section id={styles.filterSide}>
						
						<span>Active filters</span>
						
						<div className={styles.activeFilters}>
							{ state.genre.map((entry, i) => { 
								return <InfoButton key={`genre-${i}`} 
									text={entry} 
									type='genre'
									canDelete={true}
									callback={deleteFilter}/> })
							}
							{ state.decade.map((entry, i) => {
								return <InfoButton 
									key={`decade-${i}`} 
									text={entry}
									type='decade' 
									canDelete={true}
									callback={deleteFilter}/>})
							}
						</div>
						
						<MoviesFilterText 
							name='Title' 
							callback={handleSearchTitle} 
							state={state.title}/>
						<MoviesFilterSide
							name='Genre'
							options={genres}
							handleFilters={handleFilters}
							state={state.genre}
							activeLimit={3}/>
						<MoviesFilterSide 
							name='Decade' 
							options={decades} 
							handleFilters={handleFilters} 
							state={state.decade} 
							activeLimit={1} />
					</section>
					
					<section id={styles.right}>
						<div id={styles.filterTop}>
							<MoviesSort activeSort={activeSort} callBack={handleSortInput}/>
						</div>
					
						<div id={styles.movieItems}>
							{
								searchData &&
								<SingleLine data={searchData.movies} type='detail' />

							}

						</div>
					</section>



				</div>
			</div>



		</>
	)
}

export default Movies